
////
/// @group functions
////

$base-fontsize: 100% !default;

/// Convert one or more pixel values to matching unit values.
///
/// @param {Number} $value - Value to convert
/// @param {Number}
@function rb-convert-px-to-unit($value, $base-value: null, $unit: rem)  {
    @if $base-value == null {
        $base-value: $base-fontsize;
    }

    @if($value == "auto") {
        @return $value;
    }

    @if (unitless($value)) {
        $value: $value * 1px;
    }


    @if type-of($base-value ) == 'number'{
        @if (unit($base-value) == '%') {
            $base-value: strip-unit($base-value);
            $base-value: (16 / 100) * $base-value * 1px;
        }
        @elseif (unitless($base-value)) {
            $base-value: $base-value * 1px;
        }
    }

    $value: ($value / $base-value) + $unit;

    @if ($value == ("0" + $unit)) {
        $value: 0;  // Turn 0rem/0em into 0
    }

    @return $value;
}

@function rb-rem-calc($values, $base-value: null) {
    $value-length: length($values);
    $remValues: ();

    @if $value-length == 1 {
        @return rb-convert-px-to-unit(nth($values, 1));
    }

    @for $i from 1 through $value-length {
        $remValues: append($remValues, rb-convert-px-to-unit(nth($values, $i), $base-value));
    }

    @return $remValues;
}

@function rb-em-calc($values, $base-value: null) {
    $value-length: length($values);
    $emValues: ();

    @if $value-length == 1 {
        @return rb-convert-px-to-unit(nth($values, 1), $base-value, em);
    }

    @for $i from 1 through $value-length {
        $emValues: append($emValues, rb-convert-px-to-unit(nth($values, $i), $base-value, em));
    }

    @return $emValues;
}