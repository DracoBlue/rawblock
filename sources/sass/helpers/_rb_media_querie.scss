// Get width by breakpoint name
//
// @param {String} $breakpoint - Breakpoint name in $breakpoint-config.
//
// @requires {List} $breakpoint-config
//
@function rb-get-breakpoint-width($breakpoint) {
    @if map-has-key($breakpoint-config, $breakpoint) {
        $breakpoint-data: map-get($breakpoint-config, $breakpoint);
        @return map-get( $breakpoint-data, media);
    }
    @else {
        @warn "Value #{$breakpoint} not found in $breakpoint-configs"
    }
}


// Create Media Query
//
// Inspired by https://github.com/sass-mq/sass-mq/blob/master/_mq.scss
//
// @param {String | Null } $from (null) - Breakpoint min-width. Use breakpoint-name from $breakpoint-config or set our desired min-width.
// @param {String | Null } $until (null) - Breakpoint max-width. Use breakpoint-name from $breakpoint-config or set our desired max-width.
// @param {String | Null } $and (null) - Additional media query parameters
// @param {String | Null } $media-type (null) - Media type: screen, print ...
//
// @requires {List} $breakpoint-config
// @requires {function} rb-get-breakpoint-width
// @requires {function} rb-em-calc();
//
// @examples
// .element {
//
//      @include rb-create-mq(s) {
//          background: #000;
//      }
//
//       @include rb-create-mq($from: m, $until: l) {
//          background: #000;
//      }
//
//       @include rb-create-mq($until: 1000px) {
//          background: #000;
//      }
//
//       @include rb-create-mq($from: l, $and: '(orientation: landscape)') {
//          background: #000;
//      }

//      @include rb-create-mq($media-type: print) {
//          background: #000;
//      }
// }
@mixin rb-create-mq($from: null, $until: null, $media-type: null, $and: null) {

    //Defaults
    $min-width: 0;
    $max-width: 0;
    $media-query: '';


    //Include from this viewport size.
    @if $from {
        @if type-of($from) == number {
           $min-width: rb-em-calc($from);
        } @else {
           $min-width: rb-em-calc(rb-get-breakpoint-width($from));
        }
    }

    //Include until this viewport size.
    @if $until {
        @if type-of($until) == number {
            $max-width: rb-em-calc($until);
        } @else {
            $max-width: rb-em-calc(rb-get-breakpoint-width($until)) - .01em;
        }
    }

    @if $min-width != 0 { $media-query: '#{$media-query} and (min-width: #{$min-width})'; }
    @if $max-width != 0 { $media-query: '#{$media-query} and (max-width: #{$max-width})'; }
    @if $and            { $media-query: '#{$media-query} and #{$and}'; }

    // Remove unnecessary media query prefix 'all and '
    @if $media-query != '' { $media-query: str-slice(unquote($media-query), 6); }
    @if ($media-type == 'all' or $media-type == null)  {
        $media-type: '';
    }


    @media #{$media-type + $media-query} {
        @content;
    }

}