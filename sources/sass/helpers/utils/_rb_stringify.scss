@function rb-escape-quotes($string, $prepend: '') {
    $newstring: $string;

    @if type-of($string) == "string" {
        $length: str_length($string);
        $index: str_index($string, '"');

        @if $index and $index > 0 {
            @if $prepend == '' {
                @warn 'doubble quote found in "' + $string + '" will convert to single quote.';
            }
            $prepend: str_slice($string, 0, $index - 1) + "'";
            $newstring: rb-escape-quotes((str_slice($string, $index + 1, $length + 1)), $prepend);
        }

        @return $prepend + $newstring;
    }
    @return $string;
}

@function rb-stringify($data) {
    $string: "";
    $type: type-of($data);

    @if type-of($data) == 'color' {
        $data: inspect($data);
        $type: 'string';
    }

    @if $type == "map" {
        $string: $string + "{";

        @each $key, $value in $data {
            $string: $string + '"' + $key + '":' + rb-stringify($value) +',';
        }

        $string: str-slice($string, 0, str-length($string) - 1) + '}';
    } @else if $type == "list" {
        $string: $string + "[";

        @if length($data) != 0 {
            @for $i from 1 through length($data) {
                $string: $string + rb-stringify(nth($data, $i)) +',';
            }
        }

        $string: str-slice($string, 0, str-length($string) - 1)  + ']';
    } @else if $type == "number" and unitless($data) {
        $string: $string + $data;
    } @else if $type == "string" or $type == "number" {
        $string: $string + ' "' + rb-escape-quotes($data) + '"';
    } @else if $type == "bool" {
        $string: $string + $data;
    } @else {
        $string: $string + 'null';
    }

    @return $string;
}

@mixin rb-js-export($data) {
    $string: rb-stringify($data);
    content: $string !important;

    &::before {
        content: $string !important;
        visibility: hidden !important;
        display: block !important;
        height: 0 !important;
        width: 0;
        clear: both;
        overflow: hidden;
    }
}

$rb-included-global-custom-vars: ();

@mixin rb-custom-var($prop, $value, $stopInheritance: true){
    #{$prop}: $value;

    @if $stopInheritance and not map_has_key($rb-included-global-custom-vars, $prop) {
        $rb-included-global-custom-vars: map-merge($rb-included-global-custom-vars, (#{$prop}: true)) !global;
        @at-root {
            * {#{$prop}: initial;}
        }
    }
}

@mixin rb-js-export-next($data, $prefix: 'rb-cfg') {
    $end-value: "";
    $need-inheritance-stop: false;
    $inheritance-map: ();
    $string: rb-stringify($data);
    $prefix: '--' + $prefix + '-';

    @each $prop, $value in $data {
        $end-value: $prefix + $prop;
        @include rb-custom-var($end-value, rb-stringify($value), false);

        @if not map_has_key($rb-included-global-custom-vars, $end-value) {
            $need-inheritance-stop: true;
            $inheritance-map: map-merge($inheritance-map, (#{$end-value}: true));
        }
    }

    @if $need-inheritance-stop {
        @at-root {
            * {
                @each $prop, $value in $inheritance-map {
                    $rb-included-global-custom-vars: map-merge($rb-included-global-custom-vars, (#{$prop}: true)) !global;
                    #{$prop}: initial;
                }
            }
        }
    }
}

/* old/deprecated API: */
@function rbToJSON($data) {
    @return rb-stringify($data);
}

@mixin exportToJS($data) {
    @include rb-js-export($data);
}
